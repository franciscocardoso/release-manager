#!/usr/bin/env node

const _ = require('lodash');
const { program } = require('commander');
const GithubClient = require('../clients/github-client');

/**
 * Constants.
 */

const token = process.env.GITHUB_TOKEN;

/**
 * Command-line program definition.
 */

program
  .description(`
Produces an output with a list of:
- PRs merged on the base branch that are missing in the given branch;
- Merged commits on the base branch that are picked on the given branch but are not covered in this step;
- Unmerged commits on the base branch that are picked on the given branch;
  `)
  .option('-b, --branch <branch>', '[required] Branch to sync with base branch')
  .option('-l, --base <base>', 'Base branch', 'master')
  .option('-o, --owner <owner>', '[required] Repository owner')
  .option('-r, --repo <repo>', '[required] Repository name')
  .option('-s, --step <step>', 'Base branch commit to sync to')
  .parse(process.argv);

/**
 * Paginates github commits on the given repository branch and
 * maps them in a new object containing two properties:
 *  - hashes, an array with all the commit hashes;
 *  - list, an object with all commits with the key set to the commit message;
 */

const mapCommits = async ({
  branch, page, owner, repo,
} = {}) => {
  const result = { list: {}, hashes: [] };
  const github = new GithubClient({ token });

  const { data: commits } = await github.client.repos.listCommits({
    page, owner, repo, sha: branch,
  });

  for (const item of commits) {
    result.hashes.push(item.sha);
    result.list[item.commit.message.replace('[unmerged] ', '')] = item;
  }

  return result;
};

/**
 * Build the list of commits discarding those after the `firstCommonHash`.
 * When step is provided we only start building the list from the moment
 * that commit is found and previous commits are discarded.
 */

const buildCommitsList = ({ commits, firstCommonHash, step } = {}) => {
  const result = {};
  let startBuilding = !step;

  for (const key in commits) {
    const element = commits[key];

    startBuilding = startBuilding || step && _.startsWith(element.sha, step);

    if (element.sha !== firstCommonHash) {
      if (startBuilding) {
        result[key] = element;
      }
    } else {
      break;
    }
  }

  return result;
};

/**
 * Command-line coroutine.
 */

(async () => {
  const options = program.opts();

  if (!options.branch || !options.owner || !options.repo) {
    return program.help();
  }

  const {
    base, branch, owner, repo, step,
  } = program.opts();
  const fromHashes = [];
  const fromTemp = {};
  const toHashes = [];
  const toTemp = {};
  let done = false;
  let firstCommonHash;
  let page = 0;

  console.log('Fetching commits...');

  while (!done) {
    const [fromResult, toResult] = await Promise.all([
      mapCommits({
        branch, page, owner, repo,
      }),
      mapCommits({
        branch: base, page, owner, repo,
      }),
    ]);

    // Cash pagination results.
    fromHashes.push(...fromResult.hashes);
    toHashes.push(...toResult.hashes);

    _.assign(fromTemp, fromResult.list);
    _.assign(toTemp, toResult.list);

    // If we find an intersection on both branchs hashes it means
    // that we found the commit from where we need to start building
    // the difference from.
    // Otherwise we need to continue to look and get the next commits page.
    const intersection = _.intersection(fromHashes, toHashes);
    [firstCommonHash] = intersection;

    if (firstCommonHash) {
      done = true;
    } else {
      page += 1;
    }
  }

  const changelog = [];

  // "Full" content of given branch.
  const from = buildCommitsList({ commits: fromTemp, firstCommonHash });
  const mergedCherries = [];

  // Content of base branch until the step commit is found.
  const stepInto = step ? buildCommitsList({ commits: toTemp, firstCommonHash, step }) : {};

  // "Full" content of base branch.
  const to = buildCommitsList({ commits: toTemp, firstCommonHash });
  const unmergedCherries = [];

  // Unmerged code already picked into the given branch.
  const unmerged = _.difference(Object.keys(from), Object.keys(to));

  for (const element of unmerged) {
    const item = from[element];

    unmergedCherries.push(`- ${item.sha} - ${item.commit.message} <${item.commit.author.name}>\n`);
  }

  // Merged code, not covered in this step, already picked into the given branch.
  const nonCoveredCommits = _.difference(Object.keys(to), Object.keys(stepInto));
  const mergedAndPicked = step ? _.intersection(nonCoveredCommits, Object.keys(from)) : [];

  for (const element of mergedAndPicked) {
    const item = from[element];

    mergedCherries.push(`- ${item.sha} - ${item.commit.message} <${item.commit.author.name}>\n`);
  }

  // Merged pull request to be considered in the sync.
  const target = step ? stepInto : to;
  const newCommits = _.difference(Object.keys(target), Object.keys(from));
  const { length } = newCommits;
  const github = new GithubClient({
    repo, owner, token, branch: base,
  });
  let counter = 0;

  console.log(`Fething PR information for ${length} commits`);

  for (const element of newCommits) {
    const item = to[element];
    const { data: [pr] } = await github.getPullRequestByCommitHash(item.sha);

    // If there's no Pull Request associated that's a release commit.
    if (!pr) {
      changelog.push(`- ${item.commit.message}\n`);
    } else {
      changelog.push(`- ${pr.title} [\\#${pr.number}](${pr.html_url}) ([${pr.user.login}](${pr.user.html_url}))\n`);
    }

    counter += 1;

    if (counter % 10 === 0 || counter === length) {
      console.log(`Missing information for ${length - counter} commits`);
    }
  }

  if (unmergedCherries.length) {
    process.stdout.write('\n\n## Unmerged Cherry-picks\n\n');
    _.uniq(unmergedCherries).forEach((line) => process.stdout.write(line));
  }

  if (mergedCherries.length) {
    process.stdout.write('\n\n## Merged Cherry-picks\n\n');
    _.uniq(mergedCherries).forEach((line) => process.stdout.write(line));
  }

  if (changelog.length) {
    process.stdout.write('\n\n## Changelog\n\n');
    _.uniq(changelog).forEach((line) => process.stdout.write(line));
  }

  if (!unmergedCherries.length && !mergedCherries.length && !changelog.length) {
    process.stdout.write('\n\nBranches up-to-date\n\n');
  }

  process.exit();
})();
